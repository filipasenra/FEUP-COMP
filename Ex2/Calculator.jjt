options
{
    LOOKAHEAD=3;
    /*FORCE_LA_CHECK = true;*/
}

PARSER_BEGIN(Calculator)
import java.util.HashMap;

public class Calculator {

    
    public static HashMap<String, Integer> symbolTable = new HashMap<String, Integer>();

    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for a calculator that accepts expressions with integers, +,-,*,/,(, and ).");
        System.out.println("Write an arithmetic expression:");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // returns reference to root node 
        
        root.dump(""); // prints the tree on the screen

        System.out.println("Expression value: "+myCalc.eval(root));
        
        }

        int eval(SimpleNode node) {

        if(node.jjtGetNumChildren() == 0) // leaf node with integer value
            return node.val;
        else if(node.jjtGetNumChildren() == 1) // only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

        switch(node.id) {
            case CalculatorTreeConstants.JJTADD: return eval( lhs ) + eval( rhs );
            case CalculatorTreeConstants.JJTSUB: return eval( lhs ) - eval( rhs );
            case CalculatorTreeConstants.JJTMUL: return eval( lhs ) * eval( rhs );
            case CalculatorTreeConstants.JJTDIV: return eval( lhs ) / eval( rhs );
            default : // abort
            System.out.println("Ilegaloperator!");System.exit(1);}

        return 0;
    }
}

PARSER_END(Calculator)


SKIP:
{
    " " | "\r" | "\t"
}

TOKEN:
{
    < INTEGER: (["0"-"9"])+ >
    | < LF: "\n" >
    | < SYMBOL: ["A"-"Z", "a"-"z"] (["0"-"9", "A"-"Z", "a"-"z"])* >
    | < ASSIGN: "=" >
    
}

SimpleNode Expression(): {}
{
    (Expr4())* Expr1(1) ";" <LF>  {return jjtThis;} //Java code inside brackets

}

void Expr1(int sign) #void: {}
{
 Expr2(sign)
 [
 ("+" Expr2(sign) #Add(2)
 | "-" Expr2(sign) #Sub(2))
 ]
}

void Expr2(int sign) #void: {} // 1: positive; -1: negative
{
 Expr3(sign)
 ("*" Expr3(1) #Mul(2)
 | "/" Expr3(1) #Div(2)
 )? // (…)?equivalent to […]
}

void Expr3(int sign) #void: {Token t;}
{
    (
        ( t=<INTEGER>
        {
            jjtThis.val = sign * Integer.parseInt(t.image);
        } #Term )
    | 
        ( t = <SYMBOL>
        {
            jjtThis.val = sign * symbolTable.get(t.image);
        }  #Term )
    )
    | "-" Expr3(-1)
    | "-(" Expr3(-1) ")"
    | "(" Expr1(1) ")"
    | "-(" Expr1(-1) ")"
}

void Expr4() #void: {Token t1, t2;}
{
    t1 = <SYMBOL>
    <ASSIGN>
    t2 = <INTEGER>
    ";"
    <LF> {
        symbolTable.put(t1.image, Integer.parseInt(t2.image));
    }
}